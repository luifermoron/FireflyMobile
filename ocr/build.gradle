apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    def gitUrl = getRepositoryURL()
    defaultConfig {
        multiDexEnabled true
    }
    buildTypes {

        release {
            resValue "string", "app_name", "OCR"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            universalApk true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'cz.adaptech.android:tesseract4android:2.1.0'

    implementation 'com.google.android.material:material:1.3.0-alpha03'

    implementation "androidx.multidex:multidex:2.0.1"
    implementation files('libs/java-string-similarity-2.0.0.jar')

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.1'

}

static String getGitWorkingBranch() {
    try {
        def gitProcess = "git rev-parse --abbrev-ref HEAD".execute()
        gitProcess.waitFor()
        if (gitProcess.exitValue() == 0) {
            return gitProcess.text.trim()
        } else {
            // .git not present
            return ""
        }
    } catch (IOException ignored) {
        // git is not installed
        return ""
    }
}

static String getRepositoryURL(){
    try {
        def gitProcess = "git config --get remote.origin.url".execute()
        gitProcess.waitFor()
        if (gitProcess.exitValue() == 0) {
            return gitProcess.text.trim()
        } else {
            return ""
        }
    } catch (IOException ignored) {
        return ""
    }
}


